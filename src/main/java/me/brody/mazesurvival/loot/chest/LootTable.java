package me.brody.mazesurvival.loot.chest;

import me.brody.mazesurvival.Main;
import me.brody.mazesurvival.enchantment.MazeEnchantment;
import me.brody.mazesurvival.item.CustomItem;
import me.brody.mazesurvival.item.ItemGrade;
import me.brody.mazesurvival.utils.ItemGradeUtils;
import me.brody.mazesurvival.utils.WeightedList;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Beehive;
import org.bukkit.entity.Bee;
import org.bukkit.entity.EntityType;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BlockStateMeta;

import java.util.HashMap;
import java.util.Map;
import java.util.function.Supplier;

public class LootTable extends WeightedList<Supplier<ItemStack>> {
	public static LootTable STRONGHOLD_LOOT_TABLE;
	public static LootTable DESERT_LOOT_TABLE;
	public static LootTable SWAMP_LOOT_TABLE;
	public static LootTable NETHER_LOOT_TABLE;
	public static LootTable DEEP_DARK_LOOT_TABLE;

	private LootTable() {}

	public static void init(Main plugin) {
		STRONGHOLD_LOOT_TABLE = new LootTable();
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.OAK_LOG, 10)), 20);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.COBBLESTONE, 8)), 20);
		ItemStack cobblestoneIronGrade = ItemGradeUtils.createGradedItem(new ItemStack(Material.COBBLESTONE, 5), ItemGrade.IRON);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(cobblestoneIronGrade), 5);
		ItemStack cobblestoneGoldGrade = ItemGradeUtils.createGradedItem(new ItemStack(Material.COBBLESTONE, 3), ItemGrade.GOLD);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(cobblestoneGoldGrade), 3);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.AMETHYST_SHARD)), 5);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.LEATHER, 2)), 20);
		ItemStack leatherIronGrade = ItemGradeUtils.createGradedItem(new ItemStack(Material.LEATHER), ItemGrade.IRON);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(leatherIronGrade), 5);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SWIFTNESS.getItemStack()), 2);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SWIFTNESS_EXTENDED.getItemStack()), 2);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SWIFTNESS_II.getItemStack()), 2);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.APPLE)), 20);
		ItemStack appleIronGrade = ItemGradeUtils.createGradedItem(new ItemStack(Material.APPLE), ItemGrade.IRON);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(appleIronGrade), 5);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.WHEAT_SEEDS)), 20);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.CARROT)), 5);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.DIRT, 10)), 20);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.SAND, 10)), 10);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.GRAVEL, 10)), 10);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.ANDESITE, 10)), 20);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.DIORITE, 10)), 20);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.GRANITE, 10)), 20);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.CHARCOAL, 5)), 10);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.CLOCK)), 2);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.BONE)), 20);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.GOLDEN_APPLE)), 2);
		STRONGHOLD_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.MAZE_RUNNER_BOOTS.getItemStack()), 1);

		Map<MazeEnchantment, Integer> desertEnchantments = new HashMap<>();
		desertEnchantments.put(MazeEnchantment.PROTECTION, 1);
		desertEnchantments.put(MazeEnchantment.THORNS, 1);
		desertEnchantments.put(MazeEnchantment.SOUL_SPEED, 1);
		desertEnchantments.put(MazeEnchantment.VITALITY, 1);
		desertEnchantments.put(MazeEnchantment.SHARPNESS, 1);
		desertEnchantments.put(MazeEnchantment.SMITE, 1);
		desertEnchantments.put(MazeEnchantment.BANE_OF_ARTHROPODS, 1);
		desertEnchantments.put(MazeEnchantment.FIRE_ASPECT, 1);
		desertEnchantments.put(MazeEnchantment.KNOCKBACK, 1);
		desertEnchantments.put(MazeEnchantment.LOOTING, 1);
		desertEnchantments.put(MazeEnchantment.CRUSADER, 1);
		desertEnchantments.put(MazeEnchantment.POWER, 1);
		desertEnchantments.put(MazeEnchantment.PUNCH, 1);
		desertEnchantments.put(MazeEnchantment.LINGERING_SHOT, 1);
		desertEnchantments.put(MazeEnchantment.UNBREAKING, 1);
		DESERT_LOOT_TABLE = new LootTable();
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.RAW_COPPER)), 20);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.TIN.getItemStack()), 20);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.LAPIS_LAZULI)), 5);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SCRIPTING_PAPER.getItemStack()), 2);
		DESERT_LOOT_TABLE.add(new EnchantedScriptLootTableEntry(desertEnchantments, false), 1);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SWIFTNESS_II.getItemStack()), 2);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SWIFTNESS_II_EXTENDED.getItemStack()), 2);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.BIRCH_LOG, 10)), 20);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.BIRCH_SAPLING)), 20);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.POTATO)), 5);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.CACTUS)), 5);
		ItemStack cactusIronGrade = ItemGradeUtils.createGradedItem(new ItemStack(Material.CACTUS), ItemGrade.IRON);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(cactusIronGrade), 3);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.SUGAR, 5)), 5);
		ItemStack sugarIronGrade = ItemGradeUtils.createGradedItem(new ItemStack(Material.SUGAR, 3), ItemGrade.IRON);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(sugarIronGrade), 3);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.SAND, 10)), 20);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.RED_SAND, 10)), 10);
		ItemStack redSandIronGrade = ItemGradeUtils.createGradedItem(new ItemStack(Material.RED_SAND, 5), ItemGrade.IRON);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(redSandIronGrade), 5);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.SANDSTONE, 10)), 20);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.RED_SANDSTONE, 10)), 20);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.DEAD_BUSH, 3)), 10);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.BONE)), 20);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.GOLDEN_APPLE)), 2);
		DESERT_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.MAZE_RUNNER_BOOTS.getItemStack()), 1);

		Map<MazeEnchantment, Integer> swampEnchantments = new HashMap<>();
		swampEnchantments.put(MazeEnchantment.PROTECTION, 2);
		swampEnchantments.put(MazeEnchantment.THORNS, 2);
		swampEnchantments.put(MazeEnchantment.SOUL_SPEED, 1);
		swampEnchantments.put(MazeEnchantment.VITALITY, 1);
		swampEnchantments.put(MazeEnchantment.SHARPNESS, 1);
		swampEnchantments.put(MazeEnchantment.SMITE, 2);
		swampEnchantments.put(MazeEnchantment.BANE_OF_ARTHROPODS, 2);
		swampEnchantments.put(MazeEnchantment.FIRE_ASPECT, 1);
		swampEnchantments.put(MazeEnchantment.KNOCKBACK, 2);
		swampEnchantments.put(MazeEnchantment.LOOTING, 1);
		swampEnchantments.put(MazeEnchantment.CRUSADER, 2);
		swampEnchantments.put(MazeEnchantment.POWER, 1);
		swampEnchantments.put(MazeEnchantment.PUNCH, 1);
		swampEnchantments.put(MazeEnchantment.LINGERING_SHOT, 1);
		swampEnchantments.put(MazeEnchantment.UNBREAKING, 1);
		SWAMP_LOOT_TABLE = new LootTable();
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.RAW_IRON)), 20);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.LAPIS_LAZULI)), 3);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.ORICHALCUM.getItemStack()), 5);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SCRIPTING_PAPER.getItemStack()), 2);
		SWAMP_LOOT_TABLE.add(new EnchantedScriptLootTableEntry(swampEnchantments, false), 1);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SWIFTNESS_II.getItemStack()), 2);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SWIFTNESS_II_EXTENDED.getItemStack()), 2);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.SPRUCE_LOG, 10)), 20);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.SPRUCE_SAPLING)), 20);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.BEETROOT)), 5);
		ItemStack beetrootIronGrade = ItemGradeUtils.createGradedItem(new ItemStack(Material.BEETROOT, 3), ItemGrade.IRON);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(beetrootIronGrade), 5);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.BROWN_MUSHROOM)), 5);
		ItemStack brownMushroomIronGrade = ItemGradeUtils.createGradedItem(new ItemStack(Material.BROWN_MUSHROOM, 3), ItemGrade.IRON);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(brownMushroomIronGrade), 3);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.RED_MUSHROOM)), 5);
		ItemStack redMushroomIronGrade = ItemGradeUtils.createGradedItem(new ItemStack(Material.RED_MUSHROOM, 3), ItemGrade.IRON);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(redMushroomIronGrade), 3);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.HONEYCOMB, 3)), 10);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.LILAC)), 3);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.ROSE_BUSH)), 3);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.MUD, 10)), 20);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.LILY_PAD, 1)), 20);
		ItemStack beeNestItem = new ItemStack(Material.BEE_NEST);
		BlockStateMeta beeNestMeta = (BlockStateMeta)beeNestItem.getItemMeta();
		Beehive beehive = (Beehive)beeNestMeta.getBlockState();
		for(int i = 0; i < 2; i++) {
			Bee bee = (Bee) plugin.getServer().getWorlds().get(0).spawnEntity(new Location(plugin.getServer().getWorlds().get(0), 0, 0, 0), EntityType.BEE);
			beehive.addEntity(bee);
		}
		beeNestMeta.setBlockState(beehive);
		beeNestItem.setItemMeta(beeNestMeta);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(beeNestItem), 5);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.BONE)), 20);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.GOLDEN_APPLE)), 2);
		SWAMP_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.MAZE_RUNNER_BOOTS.getItemStack()), 1);

		Map<MazeEnchantment, Integer> netherEnchantments = new HashMap<>();
		netherEnchantments.put(MazeEnchantment.PROTECTION, 2);
		netherEnchantments.put(MazeEnchantment.THORNS, 2);
		netherEnchantments.put(MazeEnchantment.SOUL_SPEED, 2);
		netherEnchantments.put(MazeEnchantment.VITALITY, 2);
		netherEnchantments.put(MazeEnchantment.SHARPNESS, 2);
		netherEnchantments.put(MazeEnchantment.SMITE, 4);
		netherEnchantments.put(MazeEnchantment.BANE_OF_ARTHROPODS, 4);
		netherEnchantments.put(MazeEnchantment.FIRE_ASPECT, 2);
		netherEnchantments.put(MazeEnchantment.KNOCKBACK, 2);
		netherEnchantments.put(MazeEnchantment.LOOTING, 2);
		netherEnchantments.put(MazeEnchantment.CRUSADER, 2);
		netherEnchantments.put(MazeEnchantment.POWER, 2);
		netherEnchantments.put(MazeEnchantment.PUNCH, 2);
		netherEnchantments.put(MazeEnchantment.LINGERING_SHOT, 2);
		netherEnchantments.put(MazeEnchantment.UNBREAKING, 2);
		NETHER_LOOT_TABLE = new LootTable();
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SUN_GOLD_NUGGET.getItemStack()), 20);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.TIN.getItemStack()), 10);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.RAW_COPPER)), 10);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.QUARTZ)), 5);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.MITHRIL.getItemStack()), 3);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SCRIPTING_PAPER.getItemStack()), 5);
		NETHER_LOOT_TABLE.add(new EnchantedScriptLootTableEntry(netherEnchantments, false), 1);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SCRIPTING_TOME.getItemStack()), 2);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SWIFTNESS_II_EXTENDED.getItemStack()), 2);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SWIFTNESS_III.getItemStack()), 2);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.NETHER_WART)), 5);
		ItemStack netherWartIronGrade = ItemGradeUtils.createGradedItem(new ItemStack(Material.NETHER_WART, 3), ItemGrade.IRON);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(netherWartIronGrade), 3);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.GHAST_TEAR, 2)), 10);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.NETHERRACK, 10)), 20);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.NETHER_BRICKS, 10)), 20);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.CRIMSON_NYLIUM, 10)), 20);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.WARPED_NYLIUM, 10)), 20);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.SOUL_SAND, 5)), 10);
		ItemStack soulSandIronGrade = ItemGradeUtils.createGradedItem(new ItemStack(Material.SOUL_SAND, 5), ItemGrade.IRON);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(soulSandIronGrade), 3);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.SOUL_SOIL, 10)), 20);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.BASALT, 10)), 20);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.GLOWSTONE_DUST, 5)), 10);
		ItemStack glowstoneDustIronGrade = ItemGradeUtils.createGradedItem(new ItemStack(Material.GLOWSTONE_DUST, 5), ItemGrade.IRON);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(glowstoneDustIronGrade), 3);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.BONE)), 20);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.GOLDEN_APPLE)), 2);
		NETHER_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.MAZE_RUNNER_BOOTS.getItemStack()), 1);

		Map<MazeEnchantment, Integer> deepDarkEnchantments = new HashMap<>();
		deepDarkEnchantments.put(MazeEnchantment.PROTECTION, 3);
		deepDarkEnchantments.put(MazeEnchantment.THORNS, 3);
		deepDarkEnchantments.put(MazeEnchantment.SOUL_SPEED, 3);
		deepDarkEnchantments.put(MazeEnchantment.VITALITY, 3);
		deepDarkEnchantments.put(MazeEnchantment.SHARPNESS, 3);
		deepDarkEnchantments.put(MazeEnchantment.SMITE, 5);
		deepDarkEnchantments.put(MazeEnchantment.BANE_OF_ARTHROPODS, 5);
		deepDarkEnchantments.put(MazeEnchantment.FIRE_ASPECT, 2);
		deepDarkEnchantments.put(MazeEnchantment.KNOCKBACK, 3);
		deepDarkEnchantments.put(MazeEnchantment.LOOTING, 3);
		deepDarkEnchantments.put(MazeEnchantment.CRUSADER, 3);
		deepDarkEnchantments.put(MazeEnchantment.POWER, 3);
		deepDarkEnchantments.put(MazeEnchantment.PUNCH, 3);
		deepDarkEnchantments.put(MazeEnchantment.LINGERING_SHOT, 3);
		deepDarkEnchantments.put(MazeEnchantment.UNBREAKING, 3);
		DEEP_DARK_LOOT_TABLE = new LootTable();
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.DIAMOND)), 20);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.ADAMANTITE_INGOT.getItemStack()), 5);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SCRIPTING_TOME.getItemStack()), 4);
		DEEP_DARK_LOOT_TABLE.add(new EnchantedScriptLootTableEntry(deepDarkEnchantments, true), 2);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SWIFTNESS_II_EXTENDED.getItemStack()), 3);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SWIFTNESS_III.getItemStack()), 3);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.SWIFTNESS_III_EXTENDED.getItemStack()), 3);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.DARK_OAK_LOG, 10)), 20);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.DARK_OAK_SAPLING)), 20);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.ECHO_SHARD, 2)), 10);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.GOLDEN_CARROT, 4)), 10);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.DEEPSLATE, 10)), 20);
		ItemStack deepslateIronGrade = ItemGradeUtils.createGradedItem(new ItemStack(Material.DEEPSLATE, 10), ItemGrade.IRON);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(deepslateIronGrade), 3);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.OBSIDIAN, 10)), 20);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.SCULK, 10)), 20);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.BONE)), 20);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(new ItemStack(Material.GOLDEN_APPLE)), 2);
		DEEP_DARK_LOOT_TABLE.add(new SimpleLootTableEntry(CustomItem.MAZE_RUNNER_BOOTS.getItemStack()), 1);
	}
	
}
